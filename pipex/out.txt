i have a problem with the heredoc part, the rest is good, but the here_doc part is not writing in the outfile. It worked before, but im changing the structure.

void	pid_here_doc(t_pipex *pip)
{
	char	**temp2;

	if (dup2(pip->fd[0][0], STDIN_FILENO) == -1)
		(perror("dup2"), exit(EXIT_FAILURE));
	if (dup2(pip->fd[1][1], STDOUT_FILENO) == -1)
		(perror("pid_pipe out"), exit(EXIT_FAILURE));
	ft_close_all(pip->fd);
	temp2 = ft_split(pip->v[3], ' ');
	execve(get_path_command(pip->path, no_args_cmd(pip->v[3])), temp2, NULL);
	(ft_printf_fd(2, "zsh: command not found: %s\n", temp2[0]));
	(free_pip(pip), exit(127));
}

void	pre_heredoc(t_pipex *pip)
{
	if (dup2(pip->fd[0][1], STDOUT_FILENO) == -1)
		(perror("dup2"), exit(EXIT_FAILURE));
	ft_close_all(pip->fd);
	ft_until_limiter(pip->v[2]);
	free_pip(pip);
	exit(0);
}

int	heredoc(int argc, t_pipex *pip)
{
	int	ret;

	if (pipe(pip->fd[0]) == -1)
		return (perror("pipe1"), 1);
	pip->pid[0] = fork();
	if (pip->pid[0] == 0)
		(pre_heredoc(pip));
	pip->fd = ft_add_fd(pip->fd, 1);
	waitpid(pip->pid[0], NULL, 0);
	if (pipe(pip->fd[1]) == -1)
		return (perror("pipe1"), 1);
	pip->pid[1] = fork();
	if (pip->pid[1] == 0)
		(pid_here_doc(pip));
	pip->pid[2] = fork();
	if (pip->pid[2] == 0)
		(pid1a(pip->fd, pip->v, pip->path, argc - 1));
	(ft_close_all(pip->fd), ret = wait_all(pip->pid, 2), cleanexit(pip->path));
	return (cleanexit2(pip->fd), ret);
}

int	main(int argc, char *argv[], char *envp[])
{
	t_pipex	*pip;
	int ret;

	if (argc < 5)
		return(0);
	pip = init_pipex(envp, argv, argc);
	if (ft_isequalstr(argv[1], "here_doc"))
	{
		ret = heredoc(argc, pip);
		return (ret);
	}
	ret = multi_pipex(pip, argc);
	return (ret);
}

void	pid1a(int **fd1, char *v[], char **envp, int out)
{
	char	**t;
	char	**paths;
	int		fd_out;
	int		*fd2;
	int		i;

	paths = ft_split("error env", ' ');
	if (envp[0] && envp[0][0] != 'V')
		(cleanexit(paths), paths = get_path(envp));
	if (access(v[out], F_OK) == 0 && access(v[out], W_OK) == -1)
	{
		(ft_close_all(fd1), cleanexit2(fd1), cleanexit(paths));
		write(2, "zsh: permission denied: test/no_write\n", 38);
		exit(EXIT_FAILURE);
	}
	i = lvl2_len(fd1);
	fd2 = fd1[i - 1];
	if (dup2(fd2[0], STDIN_FILENO) == -1)
		(perror("dup2"), exit(EXIT_FAILURE));
	fd_out = open(v[out], O_WRONLY | O_CREAT | O_TRUNC, 0644);
	(dup2(fd_out, STDOUT_FILENO), close(fd_out), ft_close_all(fd1));
	t = ft_split(v[out - 1], ' ');
	execve(get_path_command(paths, no_args_cmd(v[out - 1])), t, envp);
	ft_printf_fd(2, "zsh: command not found: %s\n", t[0]);
	(cleanexit2(fd1), cleanexit(paths), cleanexit(t), exit(127));
}

➜  pipex git:(main) ✗ ./pipex here_doc "END" rev rev out.txt                                                                                             
hehe
haha
END
➜  pipex git:(main) ✗ cat out.txt -e
➜  pipex git:(main) ✗ cat out.txt   
➜  pipex git:(main) ✗ 